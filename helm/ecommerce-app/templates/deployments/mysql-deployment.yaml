apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-mysql
  labels:
    app: {{ .Values.mysql.name }}
spec:
  serviceName: {{ .Release.Name }}-mysql
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.mysql.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.mysql.name }}
    spec:
      containers:
      - name: mysql
        image: "{{ .Values.mysql.image.repository }}:{{ .Values.mysql.image.tag }}"
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef: 
              name: {{ .Release.Name }}-backend-secret  # Changed to match your secret name
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-backend-secret
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-backend-secret
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-backend-secret
              key: MYSQL_PASSWORD
        ports:
        - containerPort: {{ .Values.mysql.service.port }}
          name: mysql
        readinessProbe:
          exec:
            command: 
              - /bin/sh
              - -c
              - mysqladmin ping -h 127.0.0.1 -u root -p${MYSQL_ROOT_PASSWORD}
          initialDelaySeconds: {{ .Values.mysql.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.mysql.probes.readiness.periodSeconds }}
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - mysqladmin ping -h 127.0.0.1 -u root -p${MYSQL_ROOT_PASSWORD}
          initialDelaySeconds: {{ .Values.mysql.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.mysql.probes.liveness.periodSeconds }}
          timeoutSeconds: 5
        resources:
          {{- toYaml .Values.mysql.resources | nindent 12 }}
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: mysql-persistent-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.mysql.storage.storageClassName }}
      resources:
        requests:
          storage: {{ .Values.mysql.storage.size }}